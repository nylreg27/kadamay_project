template/chat

create_incharge_profile
{% extends 'base.html' %}

{% block content %}
  <h2>Create In-Charge Profile</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Create</button>
  </form>
{% endblock %}


chat_room
{% extends 'base.html' %}

{% block content_title %}Chat Rooms - Kadamay Mortuary System{% endblock %}

{% block content %}
<div class="bg-white rounded-lg shadow-md p-6">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold">Chat Rooms</h1>
  </div>
  
  <p class="text-gray-600 mb-6">Select a church chat room to communicate with other members.</p>
  
  {% if churches %}
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
    {% for church in churches %}
    <div class="bg-gray-50 rounded-lg shadow hover:shadow-md transition-shadow">
      <div class="p-6">
        <h2 class="text-xl font-semibold mb-2">{{ church.name }}</h2>
        <p class="text-gray-600 mb-4 truncate">{{ church.address }}</p>
        <a href="{% url 'chat:chat_room' church.id %}" class="inline-block bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
          <i class="fas fa-comments mr-2"></i> Join Chat
        </a>
      </div>
    </div>
    {% endfor %}
  </div>
  {% else %}
  <div class="bg-gray-100 p-6 rounded-lg text-center">
    <p class="text-gray-500">You don't have access to any church chat rooms.</p>
    <p class="text-gray-500 mt-2">Please contact an administrator if you believe this is an error.</p>
  </div>
  {% endif %}
</div>
{% endblock %}
<!-- templates/chat/chat_room.html -->

{% block chat_title %}{{ church.name }} Chat - Kadamay Mortuary System{% endblock %}

{% block extra_css %}
.chat-container {
height: calc(100vh - 400px);
min-height: 400px;
}
.message-container {
overflow-y: auto;
display: flex;
flex-direction: column;
}
.message {
margin-bottom: 10px;
padding: 8px 12px;
border-radius: 8px;
max-width: 70%;
word-wrap: break-word;
}
.message-self {
align-self: flex-end;
background-color: #dcf8c6;
}
.message-other {
align-self: flex-start;
background-color: #f0f0f0;
}
.message-info {
font-size: 0.75rem;
margin-top: 4px;
color: #666;
}

{% endblock %}

{% block connecting_content %}
<div class="bg-white rounded-lg shadow-md p-6">
<div class="flex justify-between items-center mb-6">
<div class="flex items-center">
<h1 class="text-2xl font-bold">{{ church.name }} Chat</h1>
<span id="connection-status" class="ml-3 px-2 py-1 text-xs rounded-full bg-yellow-100 text-yellow-800">Connecting...</span>
</div>

<a href="{% url 'chat:church_list' %}" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
  <i class="fas fa-arrow-left mr-2"></i> Back to List
</a>
</div>

<div class="chat-container bg-gray-50 rounded-lg border border-gray-200 mb-4">
<div id="message-container" class="message-container h-full p-4">
{% for message in messages %}
<div class="message {% if message.sender == user %}message-self{% else %}message-other{% endif %}">
<div class="message-content">
{{ message.message }}
</div>
<div class="message-info">

{{ message.sender.get_full_name|default:message.sender.username }}

• {{ message.sent_at|date:"M d, Y H:i" }}
</div>
</div>
{% endfor %}
</div>
</div>

<form id="chat-form" method="post" class="flex space-x-2">
{% csrf_token %}
<input type="text" name="{{ form.message.name }}" id="{{ form.message.id_for_label }}"
placeholder="Type your message..." required
class="flex-grow px-4 py-2 border border-gray-300 rounded-l focus:outline-none focus:ring-2 focus:ring-blue-500">
<button type="submit" class="bg-blue-500 text-white px-6 py-2 rounded-r hover:bg-blue-600">
<i class="fas fa-paper-plane mr-2"></i> Send
</button>
</form>
</div>
{% endblock %}

{% block extra_js %}

document.addEventListener('DOMContentLoaded', function() {
const messageContainer = document.getElementById('message-container');
const chatForm = document.getElementById('chat-form');
const connectionStatus = document.getElementById('connection-status');
const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;

// Scroll to bottom of chat
function scrollToBottom() {
  messageContainer.scrollTop = messageContainer.scrollHeight;
}

scrollToBottom();

// Last message timestamp for polling
let lastTimestamp = 0;
const messages = document.querySelectorAll('.message');
if (messages.length > 0) {
  const lastMessageInfo = messages[messages.length - 1].querySelector('.message-info').textContent;
  // Extract timestamp from "Username • Jan 1, 2023 12:34"
  const dateTimeStr = lastMessageInfo.split('•')[1].trim();
  const timestamp = new Date(dateTimeStr).getTime() / 1000;
  lastTimestamp = timestamp;
}

// Poll for new messages every 3 seconds
function pollMessages() {
  connectionStatus.textContent = 'Connected';
  connectionStatus.classList.remove('bg-yellow-100', 'text-yellow-800');
  connectionStatus.classList.add('bg-green-100', 'text-green-800');
  
  fetch(`{{ messages_url }}?last=${lastTimestamp}`)
    .then(response => response.json())
    .then(data => {
      if (data.messages && data.messages.length > 0) {
        let shouldScroll = messageContainer.scrollHeight - messageContainer.scrollTop === messageContainer.clientHeight;
        
        data.messages.forEach(msg => {
          const messageDiv = document.createElement('div');
          messageDiv.className = `message ${msg.is_self ? 'message-self' : 'message-other'}`;
          
          const contentDiv = document.createElement('div');
          contentDiv.className = 'message-content';
          contentDiv.textContent = msg.message;
          
          const infoDiv = document.createElement('div');
          infoDiv.className = 'message-info';
          infoDiv.innerHTML = `<strong>${msg.sender}</strong> • ${new Date(msg.sent_at).toLocaleString()}`;
          
          messageDiv.appendChild(contentDiv);
          messageDiv.appendChild(infoDiv);
          messageContainer.appendChild(messageDiv);
          
          lastTimestamp = msg.timestamp;
        });
        
        if (shouldScroll) {
          scrollToBottom();
        }
      }
    })
    .catch(error => {
      console.error('Error fetching messages:', error);
      connectionStatus.textContent = 'Disconnected';
      connectionStatus.classList.remove('bg-green-100', 'text-green-800');
      connectionStatus.classList.add('bg-red-100', 'text-red-800');
    });
}

// Initial poll and then set interval
pollMessages();
setInterval(pollMessages, 3000);

// Send message with AJAX
chatForm.addEventListener('submit', function(e) {
  e.preventDefault();
  
  const messageInput = document.getElementById('{{ form.message.id_for_label }}');
  const message = messageInput.value.trim();
  
  if (message) {
    // Send the message
    fetch('', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-CSRFToken': csrfToken,
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: `{{ form.message.name }}=${encodeURIComponent(message)}`
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        // Clear input
        messageInput.value = '';
        
        // Add message to chat (will appear in next poll, but add immediately for better UX)
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message message-self';
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.textContent = message;
        
        const infoDiv = document.createElement('div');
        infoDiv.className = 'message-info';
        infoDiv.innerHTML = `<strong>{{ user.get_full_name|default:user.username }}</strong> • ${new Date().toLocaleString()}`;
        
        messageDiv.appendChild(contentDiv);
        messageDiv.appendChild(infoDiv);
        messageContainer.appendChild(messageDiv);
        
        scrollToBottom();
      }
    })
    .catch(error => {
      console.error('Error sending message:', error);
      alert('Error sending message. Please try again.');
    });
  }
});
});

{% endblock %}

access_denied
{% extends 'base.html' %}

{% block content %}
  <div class="alert alert-danger">
    <h2>Access Denied</h2>
    <p>{{ message }}</p>
  </div>
{% endblock %}
